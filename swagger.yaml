openapi: 3.0.0
info:
  version: 'v1'
  title: 'ProductManagement'
  description: 'deals with the specifications of all APIs related to product, customer, ordering, shipping management'
  contact:
    email: "yasash.ramakrishnan@gmail.com"
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Yasashvini/ProductManagement/v1
paths:
  /product:
    post:
      tags:
        - "Product"
      summary: "Add a new product"
      requestBody:
        description: "addProduct"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Successfully added a new product!
          content:
            array:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid input
      security:
        - product_auth:
            - 'write:product'
            - 'read:product'
  /product/{id}/latest:
    get:
      tags:
        - "Product"
      summary: "Get the latest products(new arrivals)"
      parameters:
      - name: id
        required: true
        description: specify the id of the product and get the latest ones
        in: path
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: "New Arrivals"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      security:
        - product_auth:
            - 'write:product'
            - 'read:product'
  /product/{catid}/offers:
    get:
      tags:
        - "Product"
      summary: "Find product with offers or discount"
      parameters:
      - name: catid
        required: true
        description: specify the id of the category and get the available offers
        in: path
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: "Products with special offers"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      security:
        - product_auth:
            - 'write:product'
            - 'read:product'
  /product/{id}:
    get:
      tags:
        - "Product"
      summary: "Find product by Id"
      description: "A single project is returned if found"
      parameters:
      - name: id
        required: true
        description: specify the id of the product to find
        in: path
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: get product details with user ratings by ProductId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetails'
        400:
          description: Invalid input
        404:
          description: Product not found
      security:
        - api_key: []
    put:
      tags:
        - "Product"
      summary: "Find product by Id"
      description: "A single project is returned if found"
      parameters:
      - name: id
        required: true
        description: specify the id of the product for which you need to update certain values
        in: path
        schema:
          type: integer
          format: int64
      requestBody:
        description: Product object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Product updated successfully!
          
        400:
          description: Invalid ID supplied
          
        404:
          description: Product not found
          
        405:
          description: Validation exception
          
      security:
        - api_key: []
    delete:
      tags:
      - "Product"
      summary: "Deletes a single product"
      description: "Delete a product by ID"
      operationId: "deleteProduct"
      parameters:
      - name: "id"
        in: "path"
        description: "Product ID to delete"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successfully deleted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        400:
          description: "Invalid Id provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        404:
          description: "Product not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - product_auth:
            - 'write:product'
            - 'read:product'
  /product/{productId}/uploadImage:
    post:
      tags:
        - Product
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: productId
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - product_auth:
            - 'write:product'
            - 'read:product'
  /product/{id}/variants:
    put:
      tags:
        - Variants
      summary: Update the availability of variants
      operationId: updateVariants
      parameters:
        - name: id
          in: path
          description: ID of product for which you need to update the variants
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Change the availability to false if the variant is not available
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/SkuList'
        required: true
      responses:
        200:
          description: Updated variants successfully
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
        405:
          description: Validation exception

      security:
        - product_auth:
            - 'write:product'
            - 'read:product'
      
  /product/findByName:
    get:
      tags:
        - "Find By"
      summary: "Finds Products by Name"
      description: ""
      operationId: "findProductsByName"
      parameters:
        - name: "name"
          in: "query"
          description: "Name filter that has to be applied"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
        400:
          description: "Invalid Name value"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"       
  
  /product/findByCategory:
    get:
      tags:
      - "Find By"
      summary: "Finds Products by category"
      description: ""
      operationId: "findProductsByCategory"
      parameters:
      - name: "category"
        in: "query"
        description: "category filter that has to be applied"
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        400:
          description: "Invalid category value"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /category:
    post:
      tags:
        - "Category"
      summary: "Add a new category"
      description: ""
      operationId: "addCategory"
      requestBody:
        description: "addProduct"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Successfully added a new product!
          content:
            array:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid input
    put:
      tags:
      - "Category"
      summary: "Update an existing Category"
      description: ""
      operationId: "updateCategory"
      requestBody:
        description: "Update Category"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: "Updated Successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        400:
          description: "Invalid ID provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        404:
          description: "Category not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
  /category/{id}:
    get:
      tags:
      - "Category"
      summary: "Find category by cid"
      description: "Returns a single category"
      operationId: "getCategoryByid"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the Category to return"
        required: true
        schema:
          type: "integer"
          #format: "int64"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: "Invalid ID entered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: "Category not found"  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
      - "Category"
      summary: "Deletes a single Category and all the products with that cid"
      description: ""
      operationId: "deleteCategory"
      parameters:
      - name: "id"
        in: "path"
        description: "Category catID to delete"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successfully deleted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: "Invalid SKU supplied"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: "Category not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /cart:
    post:
      tags:
        - "Cart"
      summary: "Add a new product to cart"
      description: ""
      operationId: "addToCart"
      requestBody:
        description: "addProductToCart"
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  format: int64
                  example: 2
                prodId:
                  type: integer
                  format: int64
                  example: 1
                skuid:
                  type: string
                  example: 11234
                quantity: 
                  type: integer
                  format: int64
                  example: 1
                  
      responses:
        200:
          description: Successfully added the prod to cart!
        
        400:
          description: Invalid input
  /cart/{userid}:
    get:
      tags: 
        - "Cart"
      summary: "Get the products in the cart"
      description: "Returns the products available in cart"
      operationId: "getProductInCart"
      parameters:
      - name: "userid"
        in: "path"
        description: "ID of the User to return"
        required: true
        schema:
          type: "integer"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Cart'
        400:
          description: "Invalid ID entered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: "UserId not found"  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /cart/{userid}/{prodId}:
    delete:
      tags:
      - "Cart"
      summary: "Deletes a product from cart"
      description: ""
      operationId: "deleteProdFromCart"
      parameters:
      - name: "userid"
        in: "path"
        description: "UserId"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "prodId"
        in: "path"
        description: "ID of the product to delete"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successfully deleted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: "Category not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
        - "Cart"
      summary: "Update an existing product quantity in the cart"
      description: ""
      operationId: "updateCart"
      parameters:
      - name: "userid"
        in: "path"
        description: "UserId"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "prodId"
        in: "path"
        description: "ID of the product to delete"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        description: "Update Cart"
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity: 
                  type: integer
                  format: int64
                  example: 1
      responses:
        200:
          description: "Updated Successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        400:
          description: "Invalid ID provided"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        404:
          description: "Product not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      
  /order:
    post:
      tags:
      - store
      summary: Place an order for products
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
      x-codegen-request-body-name: body
    get:
      tags: 
        - "store"
      summary: "OrderHistory"
      description: "Order history"
      operationId: "orderHistory"
      parameters:
      - name: "userid"
        in: "query"
        description: "ID of the User for whom you need to fetch their order details"
        required: true
        schema:
          type: "integer"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderList'
        404: 
          description: "Invalid user id"
  /order/last_six_months:
    get:
      tags: 
        - "store"
      summary: "OrderHistory for the last SixMonths"
      description: "Order history"
      operationId: "orderHistorySixMonths"
      parameters:
      - name: "userid"
        in: "query"
        description: "ID of the User for whom you need to fetch their order details"
        required: true
        schema:
          type: "integer"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderList'
        404: 
          description: "Invalid user id"
  /order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: get order details by ID
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: order ID
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      tags:
      - store
      summary: Delete purchase order by ID(Cancellation)
      description: Cancel order
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: Order cancelled successfully!
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      requestBody:
        description: "addProduct"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Successfully added a new user!
        400:
          description: Invalid input
  /user/login:
    get:
      tags:
        - user
      summary: logs user into the system
      operationId: loginUser
      parameters:
      - name: "username"
        in: "query"
        description: "The user name required for login"
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: Password
        required: true
        schema:
          type: string
      responses:
        200:
          description:   User logged on successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username and password
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current user
      operationId: logoutUser
      responses:
        default: 
          description: Successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: get user by username
      operationId: getUserByName
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the user to return"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Invalid Username entered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: "User not found"  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /user/product/rating:
    post:
      tags:
        - user
      parameters:
      - name: userid
        in: query
        description: ID of the logged in user
        required: true
        schema:
          type: integer
          format: int64
      - name: productid
        in: query
        description: ID of the product for which the user needs to post his review
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: "postRating"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRating'
      responses:
        200:
          description: Your review and rating has been posted successfully
components:
  schemas:
    Category:
      type: "object"
      required:
      - id
      - name
      - tax
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
        name:
          type: "string"
          example: clothing
        tax:
          description: "Percentage of tax on the items of this category"
          type: "number"
          minimum: 0
          maximum: 1
          example: 0.25
    Product:
      type: object
      required:
      - id
      - name
      - price
      - category
      - state
      - size
      - discount
      - photoUrls
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Jean"
        price:
          type: number
          example: 700.00
          description: price excluding tax
        discount: 
          type: number
          description: Discount
          example: 20
        category:
          "$ref": "#/components/schemas/Category"
        photoUrls:
          type: array
          items:
            type: string
        state:
          type: string
          enum:
          - available
          - out of stock 
          example: available
        Attribute:
          type: "array"
          description: "Additional attributes of the Product (e.g, color, size)"
          items:
            type: "object"
            properties:
              attribute_name:
                type: string
                example: size
              options: 
                type: array
                items:
                  type: string
                  example: 
                  - S
                  - M
                  - L
          
        
        brand:
          type: string
          description: Brand of a product
          example: Levis
        
        description:
          description: Short description about product if necessary
          type: string
          example: Skinny fit
        createddate:
          description: Date of adding the product
          type: string
          format: date
        averageUserRating:
          description: Average user rating
          type: number
          format: float
          example: 4.5
          
        skus: 
          type: array
          description: "The list of product variants (Sku)"
          items:
            "$ref": "#/components/schemas/Sku"
    Sku: 
      type: object
      description: "Product Variant"
      properties: 
        name: 
          type: "string"
          description: "Display name of the SKU"
          example: "Jean-S-Blue"
        product_id: 
          type: "string"
          description: "Product identifier"
          example: 1
        sku_id: 
          type: "string"
          description: "Sku identifier"
          example: 11234
        sku_description:
          type: "string"
          description: "sku description"
          example: size-small, color-blue
        available_quantity: 
          type: integer
          description: "Number of quantities available"
          example: 10
        
        price: 
          type: "number"
          format: "float"
          description: "Price of the product in base currency"
          example: 750.00

        discount: 
          type: "number"
          format: "float"
          description: "The discount on the price (amount or percentage)"
          example: 20
        total_price: 
          type: number
          format: "float"
          description: "Total price of the product"
          example: 730.00
        is_active:
          type: boolean
          description: "true: if variant is available"
          example: true
        image: 
          type: "array"
          description: "An array of image objects"
          items:
            type: "string"
            description: "Image Url"
    SkuList:
      type: array
      items: 
        $ref: "#/components/schemas/Sku"
        
    ProductDetails:
      type: object
      properties:
        productDetails:
          $ref: "#/components/schemas/Product"
        skus:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        userRating:
          type: array
          items:
            $ref: "#/components/schemas/userRating"
          
      
    Cart:
      type: object
      properties:
        userid:
          type: integer
          format: int64
          example: 2
        prodid:
          type: integer
          format: int64
          example: 1
        sku_id:
          type: string
          example: 11234
        prodname:
          type: string
          example: "Jean"
        sku_name:
          type: string
          example: Jean-S-Blue
        price:
          type: number
          example: 700.00
          description: price excluding tax
        discount: 
          type: number
          description: Discount
          example: 20
        category:
          type: integer
          description: CategoryID
        brand:
          type: string
          description: Brand of a product
          example: "Levis"
        description:
          description: Short description about product if necessary
          type: string
        quantity: 
          description: Quantity
          type: integer
          example: 10
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        firstName:
          type: string
          example: Yasashvini
        lastName: 
          type: string
          example: R
        username:
          type: string
          example: Yasashvini
        password:
          type: string
          example: Yasash123
        phone:
          type: string
          example: 7339397540
    ApiResponse:
      type: "object"
      properties:
        message:
          type: "string"
    Order:
      type: "object"
      properties:
        userid:
          type: "integer"
          format: "int64"
          example: 2
        orderid:
          type: "integer"
          format: "int64"
          example: 1
        products:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
                example: 1
              quantity:
                type: "integer"
                format: "int64"
                example: 1
              sku_id:
                type: string
                example: 11234
              product_name: 
                type: string
                example: Jean
        shipDate:
          type: "string"
          format: "date"
        shippingAddress:
          $ref: "#/components/schemas/Address"
        total:
          type: "number"
          format: "float"
          description: "Total amount of the order"
          example: 700.00
        payment_details: 
          $ref: "#/components/schemas/PaymentDetail"
      
        status:
          type: "string"
          description: "Order Status"
          enum:
          - "placed"
          - "approved"
          - "delivered"
          example: placed
    PaymentDetail: 
      type: "object"
      description: "Payment information"
      properties: 
        status: 
          type: "string"
          description: "Payment status"
          
        payment_mode: 
          type: "string"
          description: "Mode of Payment"
          enum:
          - online
          - cash
          example: online
        ac_number: 
          type: string
          description: "account information"
        date_of_payment: 
          type: "integer"
          format: "date-time"
          description: "Date/Time when the payment was made"
        transaction_id: 
          type: "string"
          description: "Transaction ref id"
          example: VADE0B248932
    orderList:
      type: array
      items:
        $ref: "#/components/schemas/Order"
    Address: 
      type: object
      description: "Address Details"
      properties: 
          name: 
            type: "string"
            description: "Name"
            example: Yasashvini
          address1:
            type: "string"
            description: "Address line 1"
            example: 14C, Sathya sai Nagar
          address2:
            type: "string"
            description: "Address line 2"
            example: 2nd main road
          locality: 
            type: "string"
            description: "Locality"
            example: TVS Nagar
          city:
            type: "string"
            description: "City"
            example: Madurai
          state:
            type: "string"
            description: "State"
            example: Tamil Nadu
          country:
            type: "string"
            description: "Country"
            example: India
          zip:
            type: "string" 
            description: "Zip code"
            example: 625003
          landmark:
            type: "string"
            description: "Landmark"
            example: Reliance Fresh
          phone_number:
            type: "string"
            description: "Phone number"
            example: 7339397540
          email:
            type: "string"
            description: "Email id"
            example: yasash.ramakrishnan@gmail.com
    
    userRating:
      type: object
      properties:
        userId: 
          description: "ID of the user"
          type: "integer"
          example: 2
        firstname:
          description: "First Name"
          type: "string"
          example: Yasashvini
        lastname:
          description: "Last Name"
          type: "string"
          example: R
        prodId: 
          description: Product Id 
          type: "integer"
          example: 1
        prodName:
          description: Product Name
          type: "string"
          example: Jean
        rating: 
          description: "User rating"
          type: "integer"
          minimum: 0
          maximum: 5
          example: 4
        reviews:
          description: "User Reviews"
          type: "string"
          example: Perfect
  securitySchemes:
    product_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://virtserver.swaggerhub.com/Yasashvini/ProductManagement/v1/oauth/dialog'
          scopes:
            'write:product': modify products in your account
            'read:product': read your products
    api_key:
      type: apiKey
      name: api_key
      in: header